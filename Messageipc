#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/stat.h>
#include <fcntl.h>

#define MAX_TEXT 512   // Maximum length of the message that can be sent

// Message queue structure
struct my_msg {
    long int msg_type;
    char some_text[MAX_TEXT];
};

int main() {
    int running = 1;
    int msgid;
    struct my_msg some_data;
    char buffer[50]; // Array to store user input

    // Create the message queue
    msgid = msgget((key_t)14534, 0666 | IPC_CREAT);
    if (msgid == -1) { // -1 means the message queue was not created
        printf("Error in creating queue\n");
        exit(1);
    }

    // Create a named pipe (FIFO)
    if (mkfifo("fifo1", 0777) == -1) {
        printf("Error creating named pipe\n");
        exit(1);
    }
    printf("Named pipe created\n");

    // Fork to create a sender and receiver process
    pid_t pid = fork();

    if (pid == 0) { // Child process: Reader
        // Open named pipe for reading
        int res = open("fifo1", O_RDONLY);
        if (res == -1) {
            printf("Error opening named pipe for reading\n");
            exit(1);
        }

        char read_buffer[100];
        int n = read(res, read_buffer, sizeof(read_buffer));
        if (n == -1) {
            printf("Error reading from named pipe\n");
            exit(1);
        }

        printf("Reader process %d started\n", getpid());
        printf("Data received by receiver %d is: %s\n", getpid(), read_buffer);
        close(res);

    } else { // Parent process: Sender
        while (running) {
            // Take user input
            printf("Enter some text:\n");
            fgets(buffer, 50, stdin);
            some_data.msg_type = 1;
            strcpy(some_data.some_text, buffer);

            // Send message to the queue
            if (msgsnd(msgid, (void *)&some_data, MAX_TEXT, 0) == -1) {
                printf("Message not sent\n");
            }

            // Write to the named pipe
            int res = open("fifo1", O_WRONLY);
            if (res == -1) {
                printf("Error opening named pipe for writing\n");
                exit(1);
            }

            write(res, buffer, strlen(buffer));
            printf("Sender Process %d sent the data\n", getpid());
            close(res);

            // Exit if "end" is entered
            if (strncmp(buffer, "end", 3) == 0) {
                running = 0;
            }
        }
    }

    // Clean up message queue and named pipe
    msgctl(msgid, IPC_RMID, NULL);
    unlink("fifo1");
    
    return 0;
}
